{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Mini-Lesson 2: Reproducible Example (Reprex)\"\n",
        "author: \"Akbar Saputra\"\n",
        "format:\n",
        "  revealjs:\n",
        "    slide-number: true\n",
        "    chalkboard: false \n",
        "    preview-links: auto\n",
        "    footer: \"Reproducible Example (Reprex)\"\n",
        "execute:\n",
        "  eval: true\n",
        "  echo: true\n",
        "---\n",
        "\n",
        "\n",
        "## Intro\n",
        "\n",
        "Have you ever helped a relative fix their computer problem *over the phone*?\n",
        "\n",
        "That’s how it feels to answer a programming question based on a prose narrative.\n",
        "\\\n",
        "\\\n",
        "Show us the code. **Use reprex**.\n",
        "\n",
        "## What is Reproducible Example (Reprex)?\n",
        "\n",
        "A **reproducible example (reprex)** is a simplified piece of code designed to help others understand and troubleshoot an issue quickly. Reprex involves:\n",
        "\n",
        "- code that **actually runs**\n",
        "- code that **I don’t have to run**\n",
        "- code that **I can easily run**\n",
        "\n",
        "## How to create reprex\n",
        "\n",
        "1. **Isolate the part of your code** where the issue happens.\n",
        "2. **Remove unrelated parts** to keep things simple.\n",
        "3. **Use dummy data**, instead of using real files or large datasets.\n",
        "4. Make sure **all variables and data are defined**.\n",
        "\n",
        "**or**, we can use package like `reprexpy` or `reprexlite`.\n",
        "\\\n",
        "\\\n",
        "We're starting to move from `.qmd` to `.py`\n",
        "\n",
        "## Know where the error is!\n",
        "\n",
        "![](img/error.png)\n",
        "\n",
        "**Your terminal or output panel has all the information.**\n",
        "\n",
        "<span style=\"font-size: 90%\">\n",
        "Can't see your terminal? Go to Terminal > New Terminal in VSCode menu bar.\n",
        "</span>\n",
        "\n",
        "## Bad example\n"
      ],
      "id": "744305d2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "paid_fraction = paid_fraction.sort_values(ascending=False).reset_index()\n",
        "print(paid_fraction.head())\n",
        "paid_fraction.columns = ['vehicle_make', 'fraction_paid']"
      ],
      "id": "1e6ba9b3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\\\n",
        "\n",
        "<span style=\"font-size: 75%\">\n",
        "<ul>\n",
        "<li> <code>paid_fraction</code> is not defined (we don't know what it contains) </li>\n",
        "<li> <code>print()</code> is not necessary </li>\n",
        "<li> Not clear where (and what) the error is </li>\n",
        "</ul>\n",
        "</span>\n",
        "\n",
        "## Good example (using reprex)\n"
      ],
      "id": "89764a88"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "import pandas as pd\n",
        "df = pd.DataFrame({ \"vehicle_make\": [\"LEXU\", \"FORD\"],\n",
        "                    \"ticket_queue\": [\"Paid\", \"Paid\"]})\n",
        "\n",
        "ticket_freq = df['vehicle_make'].value_counts()\n",
        "paid_tickets = df[df['ticket_queue'] == 'Paid'].groupby('vehicle_make').size()\n",
        "paid_fraction = dict(paid_tickets / ticket_freq)\n",
        "\n",
        "# The following line produces error:\n",
        "# AttributeError: 'dict' object has no attribute 'sort_values'\n",
        "paid_fraction = paid_fraction.sort_values(ascending=False).reset_index()"
      ],
      "id": "de0b3d13",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "raw",
      "metadata": {},
      "source": [
        "<span style=\"font-size: 75%\">\n",
        "<ul>\n",
        "<li> all variables and data are defined </li>\n",
        "<li> focus on where the bug is </li>\n",
        "<li> contain only necessary things </li>\n",
        "<li> <strong>BUT, doesn't mean you copy the entire code!</strong></li>\n",
        "</ul>\n",
        "</span>\n",
        "\n",
        "# Thank you!\n",
        "\n",
        "<!--  Alternative YAML\n",
        "\n",
        "---"
      ],
      "id": "cadfb265"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "  revealjs:\n",
        "    slide-number: true\n",
        "    chalkboard: false \n",
        "    preview-links: auto\n",
        "    footer: \"VSCode, Quarto, and Jupyter Workshop\"\n",
        "  html:\n",
        "    toc: true\n",
        "    number-sections: true\n",
        "    html-math-method: katex\n",
        "  beamer:\n",
        "    theme: Madrid\n",
        "    colortheme: dolphin\n",
        "    fonttheme: structurebold\n",
        "    navigation: horizontal\n",
        "    section-titles: true\n",
        "  pdf:\n",
        "    documentclass: article\n",
        "    papersize: letter\n",
        "    toc: true\n",
        "    number-sections: true\n",
        "    colorlinks: true\n",
        "--- -->"
      ],
      "id": "ac6154e6"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}